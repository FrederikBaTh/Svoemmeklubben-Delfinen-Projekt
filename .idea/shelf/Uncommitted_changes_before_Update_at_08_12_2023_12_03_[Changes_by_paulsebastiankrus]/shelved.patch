Index: src/main/java/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.*;\r\n\r\npublic class Database {\r\n\r\n    private ArrayList<Member> meembers = new ArrayList<>();\r\n    private FileHandler fileHandler = new FileHandler(\"MedlemsListe.csv\");\r\n    private FileHandler fileHandler1 = new FileHandler(\"TræningsTid.csv\");\r\n\r\n    private FileHandler fileHandler2 = new FileHandler(\"KontingentOversigt.csv\");\r\n    private ArrayList<CompetitiveMember> compMeembersEvent = new ArrayList<>();\r\n    private ArrayList<CompetitiveMember> compMeembersTræning = new ArrayList<>();\r\n    private ArrayList<MembershipStatus> statusPayment = new ArrayList<>();\r\n    private Member member;\r\n\r\n    public Database() {\r\n        if (meembers.isEmpty()) {\r\n            meembers = fileHandler.loadedMembers();\r\n        }\r\n        if (compMeembersEvent.isEmpty()) {\r\n            compMeembersEvent = fileHandler.loadedCompetitiveMember(\"KonkurrenceTid.csv\");\r\n        }\r\n        if (compMeembersTræning.isEmpty()) {\r\n            compMeembersTræning = fileHandler1.loadedTræningsResultater( \"TræningsTid.csv\");\r\n        }\r\n    }\r\n\r\n   /* public void registrerPaidOrNot(int memberNumber, boolean paid) {\r\n        try {\r\n            MembershipStatus membershipStatus = new MembershipStatus(memberNumber, paid);\r\n            statusPayment.add(membershipStatus);\r\n            fileHandler.saveListOfPaidOrNot(\"KontingentOversigt.csv\", statusPayment);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }*/\r\n\r\n    public void registrerPaidOrNot(int memberNumber, boolean paid) {\r\n        try {\r\n            MembershipStatus membershipStatus = new MembershipStatus(memberNumber, paid);\r\n            statusPayment.add(membershipStatus);\r\n            fileHandler.saveListOfPaidOrNot(\"KontingentOversigt.csv\", statusPayment);\r\n\r\n            // Update the payment status for the member in the members list\r\n            Member member = getMemberByNumber(memberNumber);\r\n            if (member != null) {\r\n                member.setAnnualMembershipPaymentStatus(paid);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //_____\r\n\r\n    public int calculateYearlyIncome() {\r\n        int yearlyIncome = 0;\r\n\r\n        for (Member member : meembers) {\r\n            yearlyIncome += member.calculateYearlySubscriptionFee();\r\n        }\r\n\r\n        return yearlyIncome;\r\n    }\r\n\r\n    private void renewMembershipForSelectedMember(Member selectedMember) {\r\n        // Implement logic to renew membership, e.g., update membership status\r\n        // You may need to modify this based on your actual data structure and logic\r\n        selectedMember.setPaidAnnualMembership(true);\r\n    }\r\n\r\n    public void renewMembership() {\r\n        ArrayList<Member> members = getMeembers();\r\n\r\n        System.out.println(\"List of Members:\");\r\n        for (Member member : members) {\r\n            System.out.println(\"Member Number: \" + member.getMemberNumber() + \", Name: \" + member.getName() + \", Membership Status: \" + (member.hasPaidAnnualMembership() ? \"Paid\" : \"Not Paid\"));\r\n        }\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the Member Number to renew membership: \");\r\n        int selectedMemberNumber = scanner.nextInt();\r\n\r\n        Member selectedMember = getMemberByNumber(selectedMemberNumber);\r\n        if (selectedMember != null) {\r\n            if (member.hasPaidAnnualMembership()) {\r\n                System.out.println(\"Membership is already paid for this member.\");\r\n            } else {\r\n                renewMembershipForSelectedMember(selectedMember);\r\n                System.out.println(\"Membership renewed successfully!\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Member not found.\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //TODO MEDLEM\r\n\r\n\r\n    public void registrerMedlem(String name, String dateOfBirth, String gender, int phonenumber, String address, int memberNumber, String passiveOrActive, String memberType, String motionist) {\r\n        try {\r\n            Member member = new Member(name, dateOfBirth, gender, phonenumber, address, memberNumber, passiveOrActive, memberType, motionist);\r\n            meembers.add(member);\r\n            fileHandler.saveListOfMembersToFile(\"MedlemsListe.csv\", meembers);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public ArrayList<Member> getMeembers() {\r\n        return meembers;\r\n    }\r\n\r\n    public void sortMembersByAge(List<Member> meembers) {\r\n        meembers.sort(Comparator.comparingInt(Member::calculateAgeList));\r\n    }\r\n    public boolean memberExists(int memberNumber) {\r\n        for (Member member : meembers) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public Member getMemberByNumber(int memberNumber) {\r\n        for (Member member : getMeembers()) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return member;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public void updateMember(Member updatedMember) {\r\n        for (int i = 0; i < meembers.size(); i++) {\r\n            Member existingMember = meembers.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                meembers.set(i, updatedMember);\r\n                fileHandler.saveListOfMembersToFile(\"MedlemsListe.csv\", meembers);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    public CompetitiveMember getMemberByMemberNumberEvent (int memberNumber) {\r\n        for (CompetitiveMember member : getCompMeembersEvent()) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return member;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    //TODO EVENT\r\n\r\n    public ArrayList<CompetitiveMember> getCompMeembersEvent() {\r\n        return compMeembersEvent;\r\n    }\r\n\r\n    public void sortTrainingMembersBySwimTime() {\r\n        compMeembersTræning.sort(Comparator.comparing(CompetitiveMember::getSwimTime));\r\n    }\r\n    public void sortEventMembersBySwimTime() {\r\n        compMeembersEvent.sort(Comparator.comparing(CompetitiveMember ::getSwimTime ));\r\n    }\r\n\r\n    public boolean isCompetitiveUnder18(Member member) {\r\n        return \"aktivt\".equalsIgnoreCase(member.getPassiveOrActive()) && \"ungdomssvømmer u18\".equalsIgnoreCase(member.getMemberType()) && member.calculateAgeList() < 18;\r\n    }\r\n\r\n    public boolean isCompetitiveOver18(Member member) {\r\n        return \"aktivt\".equalsIgnoreCase(member.getPassiveOrActive()) && \"ungdomssvømmer o18\".equalsIgnoreCase(member.getMemberType()) && member.calculateAgeList() >= 18;\r\n    }\r\n    public List<Member> getCompetitiveMembersUnder18() {\r\n        List<Member> competitiveMembersUnder18 = new ArrayList<>();\r\n\r\n        for (Member member : meembers) {\r\n            if (isCompetitiveUnder18(member)) {\r\n                competitiveMembersUnder18.add(member);\r\n            }\r\n        }\r\n\r\n        return competitiveMembersUnder18;\r\n    }\r\n\r\n    public List<Member> getCompetitiveMembersOver18() {\r\n        List<Member> competitiveMembersOver18 = new ArrayList<>();\r\n\r\n        for (Member member : meembers) {\r\n            if (isCompetitiveOver18(member)) {\r\n                competitiveMembersOver18.add(member);\r\n            }\r\n        }\r\n\r\n        return competitiveMembersOver18;\r\n    }\r\n    public ArrayList<CompetitiveMember> getCompMeembers() {\r\n        return compMeembersEvent;\r\n    }\r\n    public void registrerEventTid(int memberNumber, Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline, String eventName, String eventPlacement) {\r\n        try {\r\n            CompetitiveMember competitiveMember = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline, eventName, eventPlacement);\r\n            compMeembersEvent.add(competitiveMember);\r\n            fileHandler.saveListOfKokurrenceTidToFile(\"KonkurrenceTid.csv\", compMeembersEvent);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void updateKonkurrence(CompetitiveMember updatedMember) {\r\n        for (int i = 0; i < compMeembersEvent.size(); i++) {\r\n            CompetitiveMember existingMember = compMeembersEvent.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                compMeembersEvent.set(i, updatedMember);\r\n                fileHandler.saveListOfKokurrenceTidToFile(\"KonkurrenceTid.csv\", compMeembersEvent);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n//TODO TRÆNING\r\npublic ArrayList<CompetitiveMember> getCompMeembersTræning() {\r\n    return compMeembersTræning;\r\n}\r\npublic void registrerTræningTid(int memberNumber, Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline) {\r\n    try {\r\n\r\n        //Member member = new Member(memberNumber, svimTime, dateOfSwim, swimmingDiscipline);\r\n        CompetitiveMember competitiveMember = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline);\r\n        compMeembersTræning.add(competitiveMember);\r\n        fileHandler.saveListOfTræningsTidToFile(\"TræningsTid.csv\", compMeembersTræning);\r\n\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\npublic CompetitiveMember getMemberByMemberNumberTræning(int memberNumber) {\r\n    for (CompetitiveMember member : getCompMeembersTræning()) {\r\n        if (member.getMemberNumber() == memberNumber) {\r\n            return member;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n    public void updateTræning(CompetitiveMember updatedMember) {\r\n        for (int i = 0; i < compMeembersTræning.size(); i++) {\r\n            CompetitiveMember existingMember = compMeembersTræning.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                compMeembersTræning.set(i, updatedMember);\r\n                fileHandler.saveListOfTræningsTidToFile(\"TræningsTid.csv\", compMeembersTræning);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //TODO BÅDE TRÆNING OG EVENT\r\n\r\n    public List<CompetitiveMember> getTop5SwimTimes(SwimmingDiscipline swimmingDiscipline) {\r\n        List<CompetitiveMember> competitiveMembers = new ArrayList<>();\r\n\r\n        switch (swimmingDiscipline) {\r\n            case BUTTERFLY:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case BACKSTROKE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case BREASTSTROKE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case FREESTYLE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n        }\r\n\r\n        competitiveMembers.sort(Comparator.comparing(CompetitiveMember::getSwimTime));\r\n\r\n        return competitiveMembers;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Database.java b/src/main/java/Database.java
--- a/src/main/java/Database.java	(revision 8c83904c03629e5ef59a3ddeaf2225d20ac747a2)
+++ b/src/main/java/Database.java	(date 1702032466358)
@@ -26,6 +26,9 @@
         if (compMeembersTræning.isEmpty()) {
             compMeembersTræning = fileHandler1.loadedTræningsResultater( "TræningsTid.csv");
         }
+        if (statusPayment.isEmpty()){
+            statusPayment = fileHandler2.loadListOfPaidOrNot("KontingentOversigt.csv");
+        }
     }
 
    /* public void registrerPaidOrNot(int memberNumber, boolean paid) {
Index: src/main/java/FileHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.NoSuchElementException;\r\nimport java.util.Scanner;\r\n\r\npublic class FileHandler {\r\n    private String fileName;\r\n\r\n\r\n    public FileHandler(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    //TODO Load og save Members\r\n    public ArrayList<Member> loadedMembers() {\r\n        ArrayList<Member> loadedMembers = new ArrayList<>();\r\n\r\n        try (Scanner fileScanner = new Scanner(new File(fileName))) {\r\n            while (fileScanner.hasNextLine()) {\r\n                String line = fileScanner.nextLine();\r\n                if (line.trim().isEmpty()) {\r\n                    continue;\r\n                }\r\n\r\n                String[] memberInfo = line.split(\",\");\r\n\r\n                if (memberInfo.length >= 2) {\r\n                    String name = memberInfo[0];\r\n                    String dateOfBirth = memberInfo[1];\r\n                    String gender = memberInfo[2];\r\n                    int phonenumber = Integer.parseInt(memberInfo[3]);\r\n                    String address = memberInfo[4];\r\n                    int memberNumber = Integer.parseInt(memberInfo[5]);\r\n                    String passiveOrActive = memberInfo[6];\r\n                    String memberType = memberInfo[7];\r\n                    String motionist = memberInfo[7];\r\n\r\n\r\n                    Member member = new Member(name, dateOfBirth, gender, phonenumber, address, memberNumber, passiveOrActive, memberType, motionist);\r\n                    loadedMembers.add(member);\r\n                } else {\r\n                }\r\n            }\r\n        } catch (FileNotFoundException | NumberFormatException | NoSuchElementException e) {\r\n            System.err.println(\"Fejl: \" + e.getMessage());\r\n        }\r\n\r\n        return loadedMembers;\r\n    }\r\n\r\n    public void saveListOfMembersToFile(String fileName, ArrayList<Member> members) {\r\n        try (PrintWriter writer = new PrintWriter(fileName)) {\r\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n            for (Member member : members) {\r\n                String memberInfo = member.getName() + \",\" +\r\n                        member.getDateOfBirth().format(formatter) + \",\" +\r\n                        member.getGender() + \",\" +\r\n                        member.getPhonenumber() + \",\" +\r\n                        member.getAdress() + \",\" +\r\n                        member.getMemberNumber() + \",\" +\r\n                        member.getPassiveOrActive() + \",\" +\r\n                        member.getMemberType() + \",\" +\r\n                        member.getMotionist();\r\n\r\n                writer.println(memberInfo);\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println(\"Fejl: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    //TODO Load Træning og konkurrence resultater\r\n\r\n    public ArrayList<CompetitiveMember> loadedTræningsResultater(String fileName) {\r\n        ArrayList<CompetitiveMember> loadedTræningsResultater = new ArrayList<>();\r\n        try (Scanner fileScanner = new Scanner(new File(fileName))) {\r\n            while (fileScanner.hasNextLine()) {\r\n                String line = fileScanner.nextLine().trim();\r\n                if (line.trim().isEmpty()) {\r\n                    continue;\r\n                }\r\n                String[] memberInfo = line.split(\",\");\r\n\r\n                if (memberInfo.length >= 1) {\r\n                    int memberNumber = Integer.parseInt(memberInfo[0]);\r\n                    Duration swimTime = parseDuration(memberInfo[1]);\r\n                    LocalDate dateOfSwim = parseDate(memberInfo[2]);\r\n                    SwimmingDiscipline swimmingDiscipline = SwimmingDiscipline.valueOf(memberInfo[3]);\r\n\r\n                    CompetitiveMember træningsResultat = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline);\r\n                    loadedTræningsResultater.add(træningsResultat);\r\n                } else {\r\n                }\r\n            }\r\n        } catch (FileNotFoundException | NumberFormatException | NoSuchElementException e) {\r\n            System.err.println(\"Fejl: \" + e.getMessage());\r\n        }\r\n        return loadedTræningsResultater;\r\n    }\r\n\r\n    public ArrayList<CompetitiveMember> loadedCompetitiveMember(String fileName) {\r\n        ArrayList<CompetitiveMember> loadedCompetitiveMember = new ArrayList<>();\r\n        try (Scanner fileScanner = new Scanner(new File(fileName))) {\r\n            while (fileScanner.hasNextLine()) {\r\n                String line = fileScanner.nextLine().trim();\r\n                if (line.trim().isEmpty()) {\r\n                    continue;\r\n                }\r\n\r\n                String[] memberInfo = line.split(\",\");\r\n\r\n                if (memberInfo.length >= 5) {\r\n                    int memberNumber = Integer.parseInt(memberInfo[0]);\r\n                    Duration swimTime = parseDuration(memberInfo[1]);\r\n                    LocalDate dateOfSwim = parseDate(memberInfo[2]);\r\n                    SwimmingDiscipline swimmingDiscipline = SwimmingDiscipline.valueOf(memberInfo[3]);\r\n                    String eventName = memberInfo[4];\r\n                    String eventPlacement = memberInfo[5];\r\n\r\n\r\n                    CompetitiveMember træningMember = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline, eventName, eventPlacement);\r\n                    loadedCompetitiveMember.add(træningMember);\r\n                } else {\r\n                }\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            System.err.println(\"Fejl: \" + e.getMessage());\r\n        }\r\n\r\n\r\n        return loadedCompetitiveMember;\r\n    }\r\n\r\n\r\n    //TODO Save Træning og konkurrence resultater\r\n    public void saveListOfKokurrenceTidToFile(String fileName, ArrayList<CompetitiveMember> compMembers) {\r\n        try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {\r\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n\r\n            for (CompetitiveMember compMember : compMembers) {\r\n                String swimTimeFormatted = formatDuration(compMember.getSwimTime());\r\n\r\n                String memberInfo = compMember.getMemberNumber() + \",\" +\r\n                        swimTimeFormatted + \",\" +\r\n                        compMember.getDateOfSwim().format(formatter) + \",\" +\r\n                        compMember.getSwimmingDiscipline() + \",\" +\r\n                        compMember.getEventName() + \",\" +\r\n                        compMember.getEventPlacement();\r\n\r\n                writer.println(memberInfo);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void saveListOfTræningsTidToFile(String fileName, ArrayList<CompetitiveMember> compMembers) {\r\n        try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {\r\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n\r\n            for (CompetitiveMember compMember : compMembers) {\r\n                String swimTimeFormatted = formatDuration(compMember.getSwimTime());\r\n\r\n                String memberInfo = compMember.getMemberNumber() + \",\" +\r\n                        swimTimeFormatted + \",\" +\r\n                        compMember.getDateOfSwim().format(formatter) + \",\" +\r\n                        compMember.getSwimmingDiscipline();\r\n\r\n                writer.println(memberInfo);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n\r\n    //TODO Fomatter og parser\r\n    private String formatDuration(Duration duration) {\r\n        long hours = duration.toHours();\r\n        long minutes = (duration.toMinutes() % 60);\r\n        long seconds = (duration.getSeconds() % 60);\r\n\r\n        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\r\n    }\r\n\r\n\r\n\r\n    private Duration parseDuration(String durationString) {\r\n        String[] components = durationString.split(\":\");\r\n\r\n        long hours = Long.parseLong(components[0]);\r\n        long minutes = Long.parseLong(components[1]);\r\n        long seconds = Long.parseLong(components[2]);\r\n\r\n        return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds);\r\n    }\r\n    public static LocalDate parseDate(String dateString) {\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n        return LocalDate.parse(dateString, formatter);\r\n    }\r\n\r\n    //____________\r\n\r\n    public void saveListOfPaidOrNot(String fileName, ArrayList<MembershipStatus> paidStatus) {\r\n        try (FileOutputStream fileOutputStream = new FileOutputStream(fileName, true)) {\r\n\r\n            for (MembershipStatus status : paidStatus) {\r\n                for (Member member : paidStatus) {\r\n                    String memberInfo = member.getMemberNumber() + \",\" +\r\n                            status.isPaidOrNot();\r\n\r\n                    memberInfo += System.lineSeparator();\r\n                    fileOutputStream.write(memberInfo.getBytes());\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n   \r\n    public ArrayList<MembershipStatus> loadListOfPaidOrNot(String fileName) {\r\n        ArrayList<MembershipStatus> loadListOfPaidOrNot = new ArrayList<>();\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 2) {\r\n                    int memberNumber = Integer.parseInt(parts[0].trim());\r\n                    boolean isPaid = Boolean.parseBoolean(parts[1].trim());\r\n\r\n                    // Assuming MembershipStatus has a constructor that takes memberNumber and paid status\r\n                    MembershipStatus status = new MembershipStatus(memberNumber, isPaid);\r\n\r\n                    // Add the MembershipStatus object to the list\r\n                    //paidOrNot.add(status);\r\n                } else {\r\n                    // Handle invalid data in the file\r\n                    System.out.println(\"Invalid data in the file: \" + line);\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        return loadListOfPaidOrNot;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/FileHandler.java b/src/main/java/FileHandler.java
--- a/src/main/java/FileHandler.java	(revision 8c83904c03629e5ef59a3ddeaf2225d20ac747a2)
+++ b/src/main/java/FileHandler.java	(date 1702032240628)
@@ -10,6 +10,9 @@
     private String fileName;
 
 
+
+
+
     public FileHandler(String fileName) {
         this.fileName = fileName;
     }
@@ -188,7 +191,6 @@
     }
 
 
-
     private Duration parseDuration(String durationString) {
         String[] components = durationString.split(":");
 
@@ -198,6 +200,7 @@
 
         return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds);
     }
+
     public static LocalDate parseDate(String dateString) {
         DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
         return LocalDate.parse(dateString, formatter);
@@ -254,4 +257,4 @@
 
 
 
-}
+
