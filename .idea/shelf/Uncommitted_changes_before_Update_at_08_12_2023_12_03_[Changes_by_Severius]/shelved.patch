Index: src/main/java/Userinterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.Duration;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.Scanner;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.List;\r\n\r\n// systemet\r\npublic class Userinterface {\r\n    private final Controller controller;\r\n\r\n\r\n    private Scanner keyboard = new Scanner(System.in);\r\n\r\n    public Userinterface(Controller controller) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    private final String TrænerAdgangskode = \"123\";\r\n    private final String formandAdgangskode = \"123\";\r\n    private final String kassereAdgangskode = \"123\";\r\n\r\n    public boolean tjekAdgangskodeTræner() {\r\n        System.out.print(\"Indtast adgangskode\");\r\n        String skrivAdgangskode = keyboard.next();\r\n        return skrivAdgangskode.equals(TrænerAdgangskode);\r\n    }\r\n     public boolean tjekAdgangskodeFormand(){\r\n         System.out.println(\"Indtast adgangskode\");\r\n         String skrivAdgangskode = keyboard.next();\r\n         return skrivAdgangskode.equals(formandAdgangskode);\r\n     }\r\n    public boolean tjekAdgangskodeKassere(){\r\n        System.out.println(\"Indtast adgangskode\");\r\n        String skrivAdgangskode = keyboard.next();\r\n        return skrivAdgangskode.equals(kassereAdgangskode);\r\n\r\n    }\r\n\r\n\r\n\r\n    public void menu() {\r\n        System.out.println(\"\"\"\r\n                Velkommen til Delfinen-klubbens systemet.\r\n                Hvilke rolle har du i klubben?\r\n                1: Træner\r\n                2: Formand\r\n                3: Kassere\r\n                9: Afslut program\r\n                \"\"\");\r\n    }\r\n\r\n    public void start() {\r\n\r\n        while (true) {\r\n            menu();\r\n\r\n            switch (keyboard.nextInt()) {\r\n                case 1:\r\n                    if (tjekAdgangskodeTræner()) {\r\n                        trænerMenu();\r\n                    } else {\r\n                        System.out.println(\"Forkert adgangskode, adgang nægtet\");\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if (tjekAdgangskodeFormand()) {\r\n                        formandMenu();\r\n                    } else {\r\n                        System.out.println(\"Forkert adgangskode, adgang nægtet\");\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if (tjekAdgangskodeKassere()) {\r\n                        kassereMenu();\r\n                    } else {\r\n                        System.out.println(\"Forkert adgangskode, adgang nægtet\");\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    exitProgram();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void trænerMenu() {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                    1: Vis alle medlemmers resultaterne\r\n                    2: Registrer et resultat af et medlem\r\n                    3: Se medlemmer på kokurrence holdet\r\n                    4: exit\r\n                    \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n\r\n                case 1:\r\n                    seTidsResultater();\r\n                    break;\r\n                case 2:\r\n                    indtastResultater();\r\n                    break;\r\n                case 3:\r\n                    seKokurrenceHold();\r\n                    break;\r\n                case 4:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Ugyldigt valg prøv igen\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void formandMenu() {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                    1: Vis alle medlemmer\r\n                    2: Registrer et medlem\r\n                    3: Rediger et medlem\r\n                    4: Afslut programmet\r\n                    \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n\r\n                case 1:\r\n                    medlemmerStamoplysninger();\r\n                    break;\r\n                case 2:\r\n                    registrerMedlem();\r\n                    break;\r\n                case 3:\r\n                    editMemberAttribute();\r\n                    break;\r\n                case 4:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Ugyldigt valg prøv igen\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void kassereMenu() {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                    1: se årlig indkomst\r\n                    2: se medlemsstatus og gebyr\r\n                    3: se oversigt for manglende betalinger\r\n                    4: afslut programmet\r\n                    \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n                case 1:\r\n                    displayYearlyIncome();\r\n                    break;\r\n                case 2:\r\n                    displayMembershipStatusAndFees();\r\n                    break;\r\n                case 3:\r\n                    showMembershipRenewalMenu();\r\n                    break;\r\n                case 4:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Ugyldigt valg prøv igen\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void medlemmerStamoplysninger() {\r\n        ArrayList<Member> members = controller.getMembers();\r\n\r\n        controller.sortMembersByAge(members);\r\n\r\n        boolean adskillelseLinjeOU18 = false;\r\n\r\n\r\n        System.out.println(\"Listen af medlemmer : \\n Under 18 årige: \\n-------------------\");\r\n        for (Member member : members) {\r\n            if (controller.calculateAge(member.getDateOfBirth()) >= 18 && !adskillelseLinjeOU18) {\r\n                System.out.println(\"Over 18 år: \\n-------------------\");\r\n                adskillelseLinjeOU18 = true;\r\n            }\r\n            System.out.println(\"navn: \" + member.getName());\r\n            System.out.println(\"Fødselsår: \" + member.getDateOfBirth());\r\n            System.out.println(\"køn: \" + member.getGender());\r\n            System.out.println(\"telefon: \" + member.getPhonenumber());\r\n            System.out.println(\"Adresse: \" + member.getAdress());\r\n            System.out.println(\"Medlemsnummer: \" + member.getMemberNumber());\r\n            System.out.println(\"Medlemsstatus: \" + member.getMemberType());\r\n            System.out.println(\"Motionist eller Konkurrence: \" + member.getMotionist());\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n\r\n    public void registrerMedlem() {\r\n        keyboard.nextLine();\r\n\r\n        System.out.print(\"Navn: \");\r\n        String name = keyboard.nextLine();\r\n\r\n        System.out.print(\"Fødselsdato i format (dd-mm-yyyy): \");\r\n        String dateOfBirth = getValidStringInputFødselsdato();\r\n\r\n        System.out.print(\"Køn: \");\r\n        String gender = keyboard.nextLine();\r\n\r\n        int phonenumber = getValidIntegerInputTelefonnummer(\"Telefonnummer: \");\r\n\r\n        System.out.print(\"Adresse: \");\r\n        String adress = keyboard.nextLine();\r\n\r\n\r\n        int memberNumber = controller.generateMemberNumber();\r\n        System.out.println(\"Autogenereret medlemsnummer: \" + memberNumber);\r\n\r\n        System.out.print(\"Er det et aktivt medlemskab?\");\r\n        String passiveOrActive = getValidInputForAktivPassiv();\r\n        String memberType = checkIfMemberIsOverOrUnder18(dateOfBirth);\r\n\r\n\r\n        if (\"aktivt\".equalsIgnoreCase(passiveOrActive)) {\r\n            memberType = checkIfMemberIsOverOrUnder18(dateOfBirth);\r\n        }\r\n\r\n        System.out.print(\"Er medlemmet Konkurrencesvømmer?: \");\r\n        String motionist = checkIfMotionistOrCompetitive();\r\n\r\n\r\n        controller.registrerMedlem(name, dateOfBirth, gender, phonenumber, adress, memberNumber, passiveOrActive, memberType, motionist);\r\n\r\n\r\n        System.out.println(\"Går ud af registrermedlem metoden\");\r\n\r\n\r\n    }\r\n\r\n\r\n    //TODO resultater af alle træningens tiderne, så træneren kan sætte de bedste ind i konkurrence.\r\n\r\n    public void seTidsResultater() {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                    1: Se resultater fra træning \r\n                    2: Se resultater fra konkurrence \r\n                    3: Vis de bedste 5 Svømmetider Efter Stil\r\n                    4: Afslut programmet \r\n                    \"\"\");\r\n            // resultater fra træning i FRONTCRAWL over 18\r\n// resultater fra træning i FRONTCRAWL under 18\r\n// resultater fra træning i BACKSTROKE over 18\r\n// resultater fra træning i BACKSTROKE under 18\r\n// resultater fra træning i BUTTERFLY over 18\r\n// resultater fra træning i BUTTERFLY under 18\r\n// resultater fra træning i BREASTSTROKE over 18\r\n// resultater fra træning i BREASTSTROKE under 18\r\n\r\n\r\n            // resultater fra konkurrence i FRONTCRAWL over 18\r\n// resultater fra konkurrence i FRONTCRAWL under 18\r\n// resultater fra konkurrence i BACKSTROKE over 18\r\n// resultater fra konkurrence i BACKSTROKE under 18\r\n// resultater fra konkurrence i BUTTERFLY over 18\r\n// resultater fra konkurrence i BUTTERFLY under 18\r\n// resultater fra konkurrence i BREASTSTROKE over 18\r\n// resultater fra konkurrence i BREASTSTROKE under 18\r\n            switch (keyboard.nextInt()) {\r\n\r\n                case 1:\r\n                    seResultaterTræning();\r\n                    break;\r\n                case 2:\r\n                    seResultaterKonkurrence();\r\n                    break;\r\n                case 3:\r\n                    visTop5SvømmetiderEfterStil();\r\n                    break;\r\n                case 4:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"ugyldigt valg \");\r\n\r\n            }\r\n        }\r\n    }\r\n    public void visTop5SvømmetiderEfterStil() {\r\n        // Assuming there are four swimming styles: Butterfly, Backstroke, Breaststroke, and Freestyle\r\n        SwimmingDiscipline[] swimmingStyles = SwimmingDiscipline.values();\r\n\r\n        for (SwimmingDiscipline style : swimmingStyles) {\r\n            System.out.println(\"Top 5 fastest times in \" + style + \":\");\r\n            List<CompetitiveMember> top5Times = controller.getTop5SwimTimes(style);\r\n\r\n            if (top5Times.isEmpty()) {\r\n                System.out.println(\"No times recorded for this style.\");\r\n            } else {\r\n                for (int i = 0; i < Math.min(5, top5Times.size()); i++) {\r\n                    CompetitiveMember member = top5Times.get(i);\r\n                    System.out.println((i + 1) + \". Member: \" + member.getMemberNumber() +\r\n                            \", Time: \" + member.getSwimTime() +\r\n                            \", Date: \" + member.getDateOfSwim());\r\n                }\r\n            }\r\n\r\n            System.out.println();  // Add a newline between styles\r\n        }\r\n    }\r\n\r\n\r\n    public void seResultaterTræning() {\r\n        ArrayList<CompetitiveMember> compMembers = controller.getCompMeembersEvent();\r\n\r\n        compMembers.sort(Comparator.comparing(CompetitiveMember::getSwimTime));\r\n\r\n        System.out.println(\"Sorteret træningsmedlemmer efter svømmetid: \");\r\n        for (CompetitiveMember CompMember : compMembers) {\r\n            System.out.println(\"Member Number: \" + CompMember.getMemberNumber());\r\n            System.out.println(\"Swim Time: \" + CompMember.getSwimTime());\r\n            System.out.println(\"Dato: \" + CompMember.getDateOfSwim());\r\n            System.out.println(\"Svømmedisciplin: \" + CompMember.getSwimmingDiscipline());\r\n            System.out.println();\r\n        }\r\n\r\n\r\n    }\r\n    public void seResultaterKonkurrence () {\r\n        ArrayList<CompetitiveMember> members = controller.getCompMeembersEvent();\r\n\r\n        controller.sortTrainingMembersBySwimTime();\r\n        System.out.println(\"Sorteret eventmedlemmer efter svømmetid: \");\r\n        for (CompetitiveMember CompMember : members) {\r\n            System.out.println(\"Member Number: \" + CompMember.getMemberNumber());\r\n            System.out.println(\"Swim Time: \" + CompMember.getSwimTime());\r\n            System.out.println(\"Dato: \" + CompMember.getDateOfSwim());\r\n            System.out.println(\"Svømmedisciplin: \" + CompMember.getSwimmingDiscipline());\r\n            System.out.println(\"Event navn: \" + CompMember.getEventName());\r\n            System.out.println(\"Arrangementsplacering: \" + CompMember.getEventPlacement());\r\n            System.out.println();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public void indtastResultater () {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                        1: registrer resultater af en træning\r\n                        2: rediger resultater af en træning\r\n                        3: registrer resultater af en konkurrence\r\n                        4: rediger resultater af en konkurrence\r\n                        5: afslut programmet\r\n                        \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n\r\n                case 1:\r\n                    indtastResultaterTræning();\r\n                    break;\r\n                case 2:\r\n                    redigerResultaterTræning();\r\n                    break;\r\n                case 3:\r\n                    indtastResultaterKonkurrence();\r\n                    break;\r\n                case 4:\r\n                    redigerResultaterKonkurrence();\r\n                    break;\r\n                case 5:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"ugyldigt valg \");\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public void redigerResultaterTræning() {\r\n        int selectedMemberNumber = getValidIntegerInputTræningMedlemsnummer(\"Vælg det medlemsnummer du vil redigere:\");\r\n\r\n        CompetitiveMember competitiveMember = controller.getCompetitiveMemberByMemberNumberEvent(selectedMemberNumber);\r\n\r\n        if (competitiveMember != null) {\r\n            Scanner scanner = new Scanner(System.in);\r\n\r\n            System.out.println(\"Edit Member Attribute Menu:\");\r\n            System.out.println(\"1. Edit Swim Time\");\r\n            System.out.println(\"2. Edit Date of Birth\");\r\n            System.out.println(\"3. Edit Swimming Discipline\");\r\n            System.out.println(\"4. Edit Event Name\");\r\n            System.out.println(\"5. Edit Event Location\");\r\n            System.out.println(\"0. Exit\");\r\n            System.out.print(\"Enter your choice: \" + \"\\n\");\r\n\r\n            int choice = scanner.nextInt();\r\n            scanner.nextLine();\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    System.out.print(\"Enter the new swim time: \");\r\n                    Duration newSwimTime = parseDuration(scanner.nextLine());\r\n                    competitiveMember.editSwimTime(String.valueOf(newSwimTime));\r\n                    break;\r\n                case 2:\r\n                    System.out.print(\"Enter the new swimming date (dd-MM-yyyy): \");\r\n                    LocalDate newDateOfSwim = parseDate(scanner.nextLine());\r\n                    competitiveMember.editDateOfSwim(String.valueOf(newDateOfSwim));\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"Enter the new swimming discipline: \");\r\n                    SwimmingDiscipline newSwimmingDiscipline = SwimmingDiscipline.valueOf(scanner.nextLine());\r\n                    competitiveMember.editSwimmingDiscipline(String.valueOf(newSwimmingDiscipline));\r\n                    break;\r\n                case 4:\r\n                    System.out.print(\"Enter the new event name: \");\r\n                    String newEventName = scanner.nextLine();\r\n                    competitiveMember.editEventName(newEventName);\r\n                    break;\r\n                case 5:\r\n                    System.out.print(\"Enter the new event location: \");\r\n                    String newEventPlacement = scanner.nextLine();\r\n                    competitiveMember.editEventPlacement(newEventPlacement);\r\n                    break;\r\n                case 0:\r\n                    System.out.println(\"Exiting edit menu.\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice. Please enter a valid option.\");\r\n                    break;\r\n            }\r\n\r\n            controller.updateTræningsTid(competitiveMember);\r\n        } else {\r\n            System.out.println(\"Selected member is not a CompetitiveMember or does not exist.\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public void redigerResultaterKonkurrence() {\r\n        int selectedMemberNumber = getValidIntegerInputKonkurrenceMedlemsnummer(\"Vælg det medlemsnummer du vil redigere:\");\r\n\r\n        CompetitiveMember competitiveMember = controller.getCompetitiveMemberByMemberNumberEvent(selectedMemberNumber);\r\n\r\n        if (competitiveMember != null) {\r\n            Scanner scanner = new Scanner(System.in);\r\n\r\n            System.out.println(\"Edit Member Attribute Menu:\");\r\n            System.out.println(\"1. Edit Swim Time\");\r\n            System.out.println(\"2. Edit Date of Birth\");\r\n            System.out.println(\"3. Edit Swimming Discipline\");\r\n            System.out.println(\"4. Edit Event Name\");\r\n            System.out.println(\"5. Edit Event Location\");\r\n            System.out.println(\"0. Exit\");\r\n            System.out.print(\"Enter your choice: \" + \"\\n\");\r\n\r\n            int choice = scanner.nextInt();\r\n            scanner.nextLine();\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    System.out.print(\"Enter the new swim time: \");\r\n                    Duration newSwimTime = parseDuration(scanner.nextLine());\r\n                    competitiveMember.editSwimTime(String.valueOf(newSwimTime));\r\n                    break;\r\n                case 2:\r\n                    System.out.print(\"Enter the new swimming date (dd-MM-yyyy): \");\r\n                    LocalDate newDateOfSwim = parseDate(scanner.nextLine());\r\n                    competitiveMember.editDateOfSwim(String.valueOf(newDateOfSwim));\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"Enter the new swimming discipline: \");\r\n                    SwimmingDiscipline newSwimmingDiscipline = SwimmingDiscipline.valueOf(scanner.nextLine());\r\n                    competitiveMember.editSwimmingDiscipline(String.valueOf(newSwimmingDiscipline));\r\n                    break;\r\n                case 4:\r\n                    System.out.print(\"Enter the new event name: \");\r\n                    String newEventName = scanner.nextLine();\r\n                    competitiveMember.editEventName(newEventName);\r\n                    break;\r\n                case 5:\r\n                    System.out.print(\"Enter the new event location: \");\r\n                    String newEventPlacement = scanner.nextLine();\r\n                    competitiveMember.editEventPlacement(newEventPlacement);\r\n                    break;\r\n                case 0:\r\n                    System.out.println(\"Exiting edit menu.\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice. Please enter a valid option.\");\r\n                    break;\r\n            }\r\n\r\n            controller.updateKonkurrenceTid(competitiveMember);\r\n        } else {\r\n            System.out.println(\"Selected member is not a CompetitiveMember or does not exist.\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public void seKokurrenceHold () {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                        1: se kokurrence hold over 18\r\n                        2: se kokurrence hold under 18\r\n                        3: afslut programmet\r\n                        \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n\r\n                case 1:\r\n                    printCompMembersOver18();\r\n                    break;\r\n                case 2:\r\n                    printCompMembersUnder18();\r\n                    break;\r\n                case 3:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"ugyldigt valg \");\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public void printCompMembersUnder18 () {\r\n        List<Member> competitiveMembersUnder18 = controller.getCompetitiveMembersUnder18();\r\n\r\n\r\n        for (Member member : competitiveMembersUnder18) {\r\n            System.out.println(member);\r\n        }\r\n    }\r\n\r\n    public void printCompMembersOver18 () {\r\n        List<Member> competitiveMembersOver18 = controller.getCompetitiveMembersOver18();\r\n\r\n        for (Member member : competitiveMembersOver18) {\r\n            System.out.println(member);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void indtastResultaterTræning () {\r\n\r\n\r\n        int selectedMemberNumber = getValidIntegerInputMedlemsnummer(\"Select Member Number from the list: \");\r\n        System.out.println(\"Selected Member Number: \" + selectedMemberNumber);\r\n        System.out.println();\r\n\r\n        if (controller.memberExists(selectedMemberNumber)) {\r\n            System.out.println(\"Svømmetid (hh:mm:ss): \");\r\n            String svømmeTidInputKonkurrence = keyboard.nextLine();\r\n\r\n            Duration svimTime = parseDuration(svømmeTidInputKonkurrence);\r\n\r\n            String dateOfSwim = getValidStringInputSvømmeDato(\"Konkurrence dato: DD-MM-ÅÅÅÅ\");\r\n\r\n            System.out.println(\"Svømmedisciplin: \");\r\n            SwimmingDiscipline swimmingDiscipline = chooseBetweenSwimmingStyles();\r\n\r\n\r\n            controller.registrerTræningsResultat(selectedMemberNumber, svimTime, LocalDate.parse(dateOfSwim, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")), swimmingDiscipline);\r\n            System.out.println(\"Member successfully registered.\");\r\n\r\n        }\r\n    }\r\n\r\n    public void indtastResultaterKonkurrence () {\r\n\r\n        int selectedMemberNumber = getValidIntegerInputMedlemsnummer(\"Vælg det medlemsnummer du vil tiføje en tid til: \");\r\n        System.out.println(\"Selected Member Number: \" + selectedMemberNumber);\r\n        System.out.println();\r\n\r\n        if (controller.memberExists(selectedMemberNumber)) {\r\n            System.out.println(\"Svømmetid (hh:mm:ss): \");\r\n            String svømmeTidInputKonkurrence = keyboard.nextLine();\r\n\r\n            Duration svimTime = parseDuration(svømmeTidInputKonkurrence);\r\n\r\n            String dateOfSwim = getValidStringInputSvømmeDato(\"Konkurrence dato: DD-MM-ÅÅÅÅ\");\r\n\r\n            System.out.println(\"Svømmedisciplin: \");\r\n            SwimmingDiscipline swimmingDiscipline = chooseBetweenSwimmingStyles();\r\n\r\n            System.out.println(\"Event navn: \");\r\n            String eventName = getValidEventName();\r\n\r\n            System.out.println(\"Event placering: \");\r\n            String eventPlacement = getValidEventPlacement();\r\n\r\n            controller.registrerEventResultat(selectedMemberNumber, svimTime, LocalDate.parse(dateOfSwim, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")), swimmingDiscipline, eventName, eventPlacement);\r\n            System.out.println(\"Member successfully registered.\");\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public String getValidEventName () {\r\n        if (keyboard.hasNextLine()) {\r\n            String input = keyboard.nextLine();\r\n            return input;\r\n        }\r\n        return getValidEventName();\r\n    }\r\n\r\n    public String getValidEventPlacement () {\r\n        if (keyboard.hasNextLine()) {\r\n            String input = keyboard.nextLine();\r\n            return input;\r\n        }\r\n        return getValidEventPlacement();\r\n    }\r\n\r\n    public int getValidIntegerInputMedlemsnummer (String prompt){\r\n        ArrayList<Member> members = controller.getMembers();\r\n\r\n        System.out.println(\"List of Member Numbers:\");\r\n        for (int i = 0; i < members.size(); i++) {\r\n            Member member = members.get(i);\r\n            System.out.println((i + 1) + \". Member Number: \" + member.getMemberNumber());\r\n        }\r\n\r\n        while (true) {\r\n            try {\r\n                System.out.print(prompt);\r\n                int inputString = keyboard.nextInt();\r\n                keyboard.nextLine();\r\n\r\n                int input = Integer.parseInt(String.valueOf(inputString));\r\n\r\n                if (String.valueOf(input).length() == 6) {\r\n                    if (controller.memberExists(input)) {\r\n                        return input;\r\n                    } else {\r\n                        System.out.println(\"Medlemsnummeret findes ikke i systemet.\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Ugyldig input. Indtast venligst et medlemsnummer på 6 cifre.\");\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                keyboard.nextLine();\r\n                System.out.println(\"Ugyldig input. Indtast venligst et medlemsnummer på 6 cifre.\");\r\n            }\r\n        }\r\n    }\r\n    public int getValidIntegerInputKonkurrenceMedlemsnummer(String prompt) {\r\n        ArrayList<CompetitiveMember> compMembers = controller.getCompMeembersEvent();\r\n\r\n        System.out.println(\"List of Competitive Member Numbers:\");\r\n        for (int i = 0; i < compMembers.size(); i++) {\r\n            CompetitiveMember compMember = compMembers.get(i);\r\n            System.out.println((i + 1) + \". Member Number: \" + compMember.getMemberNumber());\r\n        }\r\n\r\n        while (true) {\r\n            try {\r\n                System.out.print(prompt);\r\n                int inputString = keyboard.nextInt();\r\n                keyboard.nextLine();\r\n\r\n                int input = Integer.parseInt(String.valueOf(inputString));\r\n\r\n                if (String.valueOf(input).length() == 6) {\r\n                    if (controller.getCompetitiveMemberByMemberNumberEvent(input) != null) {\r\n                        return input;\r\n                    } else {\r\n                        System.out.println(\"Competitive member with the specified member number does not exist.\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Invalid input. Please enter a member number with 6 digits.\");\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                keyboard.nextLine();\r\n                System.out.println(\"Invalid input. Please enter a member number with 6 digits.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getValidIntegerInputTræningMedlemsnummer(String prompt) {\r\n        ArrayList<CompetitiveMember> compMembers = controller.getCompMeembersTræning();\r\n\r\n        System.out.println(\"List of Competitive Member Numbers:\");\r\n        for (int i = 0; i < compMembers.size(); i++) {\r\n            CompetitiveMember compMember = compMembers.get(i);\r\n            System.out.println((i + 1) + \". Member Number: \" + compMember.getMemberNumber());\r\n        }\r\n\r\n        while (true) {\r\n            try {\r\n                System.out.print(prompt);\r\n                int inputString = keyboard.nextInt();\r\n                keyboard.nextLine();\r\n\r\n                int input = Integer.parseInt(String.valueOf(inputString));\r\n\r\n                if (String.valueOf(input).length() == 6) {\r\n                    if (controller.getCompetitiveMemberByMemberNumbertræning(input) != null) {\r\n                        return input;\r\n                    } else {\r\n                        System.out.println(\"Competitive member with the specified member number does not exist.\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Invalid input. Please enter a member number with 6 digits.\");\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                keyboard.nextLine();\r\n                System.out.println(\"Invalid input. Please enter a member number with 6 digits.\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public SwimmingDiscipline chooseBetweenSwimmingStyles () {\r\n        System.out.println(\"Vælg mellem Butterfly, Front Crawl, Backstroke, Breaststroke\");\r\n        String input = keyboard.nextLine().toUpperCase();\r\n        try {\r\n            return SwimmingDiscipline.valueOf(input);\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(\"Ugyldig indtastning. Prøv igen.\");\r\n            return chooseBetweenSwimmingStyles();\r\n        }\r\n    }\r\n\r\n\r\n    private Duration parseDuration (String input){\r\n        String[] timeComponents = input.split(\":\");\r\n        if (timeComponents.length == 3) {\r\n            try {\r\n                long hours = Long.parseLong(timeComponents[0]);\r\n                long minutes = Long.parseLong(timeComponents[1]);\r\n                long seconds = Long.parseLong(timeComponents[2]);\r\n\r\n                return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds);\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Invalid input for svømmetid. Please enter time in hh:mm:ss format.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Invalid input for svømmetid. Please enter time in hh:mm:ss format.\");\r\n        }\r\n\r\n        return Duration.ZERO;\r\n    }\r\n\r\n\r\n    private String getValidStringInputSvømmeDato (String prompt){\r\n\r\n        while (true)\r\n            try {\r\n\r\n                System.out.println(prompt);\r\n                String input = keyboard.nextLine();\r\n\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n                LocalDate.parse(input, formatter);\r\n\r\n                return input;\r\n\r\n            } catch (DateTimeParseException e) {\r\n                System.out.println(\"Ugyldig input. Indtast venligst en svømmedato i formatet (dd-mm-yyyy).\");\r\n            }\r\n\r\n\r\n    }\r\n\r\n    private String getValidStringInputFødselsdato () {\r\n        while (true) {\r\n            try {\r\n                String input = keyboard.nextLine();\r\n\r\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n                LocalDate.parse(input, formatter);\r\n\r\n                return input;\r\n            } catch (DateTimeParseException e) {\r\n                System.out.println(\"Ugyldig input. Indtast venligst en fødselsdato i formatet (dd-mm-yyyy).\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private int getValidIntegerInputTelefonnummer (String prompt){\r\n        while (true) {\r\n            try {\r\n                System.out.print(prompt);\r\n                int input = keyboard.nextInt();\r\n                keyboard.nextLine();\r\n\r\n                if (String.valueOf(input).length() == 8)\r\n                    return input;\r\n                else {\r\n                    System.out.println(\"Ugyldig input. Indtast venligst et telefonnummer på 8 cifre.\");\r\n                }\r\n            } catch (java.util.InputMismatchException e) {\r\n                // eksempel på error besked (kan laves om)\r\n                System.out.println(\"Ugyldig input. Indtast venligst et telefonnummer på 8 cifre.\");\r\n                keyboard.nextLine();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private String getValidInputForAktivPassiv () {\r\n        while (true) {\r\n            try {\r\n\r\n                String input = keyboard.nextLine().toLowerCase();\r\n\r\n                if (\"Nej\".equalsIgnoreCase(input)) {\r\n                    System.out.println(\"Medlemmer med et passivt medlemskab skal betale 600kr i årligt kontingent\");\r\n                    return \"Passivt\";\r\n                } else if (\"Ja\".equalsIgnoreCase(input)) {\r\n                    return \"Aktivt\";\r\n                } else {\r\n                    System.out.println(\"Ugyldigt input. Indtast venligst 'Ja' eller 'Nej'.\");\r\n                }\r\n            } catch (java.util.InputMismatchException e) {\r\n                System.out.println(\"Ugyldigt input. Indtast venligst 'Ja' eller 'Nej'.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private String checkIfMemberIsOverOrUnder18 (String dateOfBirth){\r\n\r\n        LocalDate birthdate = LocalDate.parse(dateOfBirth, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));\r\n        LocalDate currentDate = LocalDate.now();\r\n\r\n        long age = ChronoUnit.YEARS.between(birthdate, currentDate);\r\n\r\n        if (age <= 18) {\r\n            return \"Ungdomssvømmer u18\";\r\n        } else if (age > 18 && age <= 60) {\r\n            return \"Ungdomssvømmer o18\";\r\n        } else {\r\n            return \"Senior\";\r\n        }\r\n    }\r\n\r\n    private String checkIfMotionistOrCompetitive () {\r\n        while (true) {\r\n            try {\r\n                String input = keyboard.nextLine().toLowerCase();\r\n\r\n                if (\"Ja\".equalsIgnoreCase(input)) {\r\n                    return \"Konkurrence\";\r\n                } else if (\"Nej\".equalsIgnoreCase(input)) {\r\n                    return \"Motionist\";\r\n                } else {\r\n                    System.out.println(\"Ugyldigt input. Indtast venligst 'Ja' eller 'Nej'.\");\r\n                }\r\n            } catch (java.util.InputMismatchException e) {\r\n                System.out.println(\"Ugyldigt input. Indtast venligst 'Ja' eller 'Nej'.\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Kasseren metoderne.\r\n    public void displayYearlyIncome () {\r\n        int yearlyIncome = controller.calculateYearlyIncome();\r\n        System.out.println(\"Forventet Årlig Indtægt: \" + yearlyIncome + \" kr.\");\r\n    }\r\n\r\n\r\n    public void displayMembershipStatusAndFees () {\r\n        ArrayList<Member> members = controller.getMembers();\r\n\r\n        System.out.println(\"Medlemsstatus og kontingentgebyr:\");\r\n        for (Member member : members) {\r\n            System.out.println(\"Medlem: \" + member.getName());\r\n            System.out.println(\"medlemsstatus: \" + member.getPassiveOrActive());\r\n\r\n            if (\"aktivt\".equalsIgnoreCase(member.getPassiveOrActive())) {\r\n                int subscriptionFee = member.calculateYearlySubscriptionFee();\r\n                System.out.println(\"Kontingentgebyr: \" + subscriptionFee + \" kr. årligt\");\r\n            }\r\n            if (\"passivt\".equalsIgnoreCase(member.getPassiveOrActive())) {\r\n                int subscriptionFee = member.calculateYearlySubscriptionFee();\r\n                System.out.println(\"Kontingentgebyr: \" + subscriptionFee + \" kr. årligt\");\r\n\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    //______________ Renewal membership\r\n    public void showMembershipRenewalMenu() {\r\n        boolean exit = false;\r\n        while (!exit) {\r\n            System.out.println(\"\"\"\r\n                    1. Check Membership payments\r\n                    2. Change the membership of a member.\r\n                    3. tilbage til kasseren menu\r\n                    \"\"\");\r\n            switch (keyboard.nextInt()) {\r\n                case 1:\r\n                    checkAnnualMembershipPayments();\r\n                    break;\r\n                case 2:\r\n                    changeAnnualMembershipPayments();\r\n                    break;\r\n                case 3:\r\n                    exit = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"ugyldigt valg \");\r\n            }\r\n        }\r\n    }\r\n    private void checkAnnualMembershipPayments() {\r\n        ArrayList<Member> members = controller.getMembers();\r\n\r\n            System.out.println(\"Checking Annual Membership Payments:\\n\");\r\n            for (Member member : members) {\r\n                System.out.println(\"Member: \" + member.getName() + \" (Member Number: \" + member.getMemberNumber() + \")\");\r\n                System.out.println(\"medlemsstatus: \" + member.getPassiveOrActive());\r\n\r\n\r\n            if (controller.hasPaidAnnualMembership(member)) {\r\n                System.out.println(\"\\u001B[32mPaid for the annual membership. \\u001B[0m \\n\");\r\n            } else {\r\n                System.out.println(\"\\u001B[31mHas not paid for the annual membership. \\u001B[0m \\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*public void changeAnnualMembershipPayments() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        ArrayList<Member> members = controller.getMembers();\r\n\r\n            System.out.println(\"Enter the member number for which you want to change the annual membership payment status:\");\r\n            int memberNumber = scanner.nextInt();\r\n\r\n            boolean found = false;\r\n\r\n            for (Member member : members) {\r\n                if (member.getMemberNumber() == memberNumber) {\r\n                    found = true;\r\n\r\n                    System.out.println(\"Current annual membership payment status for member \" + member.getName() + \": \" +\r\n                            (member.hasPaidAnnualMembership() ? \"Paid\" : \"Not paid\"));\r\n\r\n                    System.out.println(\"Do you want to change the status? (Enter 'Y' for Yes, 'N' for No)\");\r\n                    String input = scanner.next();\r\n\r\n                if (input.equalsIgnoreCase(\"Y\")) {\r\n                    boolean newStatus = !member.hasPaidAnnualMembership();\r\n                    member.setAnnualMembershipPaymentStatus(newStatus);\r\n                    System.out.println(\"Updated annual membership payment status for member \" + member.getName() +\r\n                            \" to \" + (newStatus ? \"Paid\" : \"Not paid\"));\r\n                    //TODO\r\n                    controller.registretPaidOrNot(memberNumber, newStatus);\r\n                } else {\r\n                    System.out.println(\"No changes made.\");\r\n                }\r\n\r\n                break; // Exit the loop since the member has been found\r\n            }\r\n        }\r\n\r\n            if (!found) {\r\n                System.out.println(\"Member with member number \" + memberNumber + \" not found.\");\r\n            }\r\n        }\r\n\r\n    //______________\r\n\r\n\r\n    public void editMemberAttribute() {\r\n        int selectedMember = getValidIntegerInputMedlemsnummer(\"Vælg det medlemsnummer du vil redigere:\");\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.println(\"Edit Member Attribute Menu:\");\r\n        System.out.println(\"1. Edit Name\");\r\n        System.out.println(\"2. Edit Date of Birth\");\r\n        System.out.println(\"3. Edit Gender\");\r\n        System.out.println(\"4. Phone Number\");\r\n        System.out.println(\"5. Address\");\r\n        System.out.println(\"6. Member Number\");\r\n        System.out.println(\"7. Motionist\");\r\n        System.out.println(\"0. Exit\");\r\n        System.out.print(\"Enter your choice: \" + \"\\n\");\r\n\r\n        int choice = scanner.nextInt();\r\n        scanner.nextLine();\r\n\r\n        Member selectedMemberObject = controller.getMemberByMemberNumber(selectedMember);\r\n\r\n\r\n        switch (choice) {\r\n            case 1:\r\n                System.out.print(\"Enter the new name: \");\r\n                String newName = scanner.nextLine();\r\n                selectedMemberObject.editName(newName);\r\n                break;\r\n            case 2:\r\n                System.out.print(\"Enter the new date of birth (dd-MM-yyyy): \");\r\n                String newDateOfBirth = scanner.nextLine();\r\n                selectedMemberObject.editDateOfBirth(newDateOfBirth);\r\n                break;\r\n            case 3:\r\n                System.out.print(\"Enter the new gender: \");\r\n                String newGender = scanner.nextLine();\r\n                selectedMemberObject.editGender(newGender);\r\n                break;\r\n            case 4:\r\n                System.out.print(\"Enter the new phone number: \");\r\n                int newPhoneNumber = scanner.nextInt();\r\n                selectedMemberObject.editPhonenumber(newPhoneNumber);\r\n                break;\r\n            case 5:\r\n                System.out.print(\"Enter the new address: \");\r\n                String newAddress = scanner.nextLine();\r\n                selectedMemberObject.editAdress(newAddress);\r\n                break;\r\n            case 6:\r\n                System.out.print(\"Enter the new member number: \");\r\n                String newPassiveOrActive = scanner.nextLine();\r\n                selectedMemberObject.editPassiveOrActive(newPassiveOrActive);\r\n                break;\r\n            case 7:\r\n                System.out.print(\"Enter the new member type: \");\r\n                String newMotionist = scanner.nextLine();\r\n                selectedMemberObject.editMotionist(newMotionist);\r\n                break;\r\n            case 0:\r\n                System.out.println(\"Exiting edit menu.\");\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid choice. Please enter a valid option.\");\r\n                break;\r\n        }\r\n        controller.updateMember(selectedMemberObject);\r\n    }\r\n\r\n\r\n    private String formatDuration(Duration duration) {\r\n        long hours = duration.toHours();\r\n        long minutes = (duration.toMinutes() % 60);\r\n        long seconds = (duration.getSeconds() % 60);\r\n\r\n        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\r\n    }\r\n\r\n\r\n\r\n    public static LocalDate parseDate(String dateString) {\r\n        // Assuming the format is \"yyyy-MM-dd\"\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\r\n        return LocalDate.parse(dateString, formatter);\r\n    }\r\n\r\n\r\n\r\n\r\n    private void exitProgram () {\r\n        System.out.println(\"Afslutter programmet.\");\r\n        System.exit(0);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Userinterface.java b/src/main/java/Userinterface.java
--- a/src/main/java/Userinterface.java	(revision 8c83904c03629e5ef59a3ddeaf2225d20ac747a2)
+++ b/src/main/java/Userinterface.java	(date 1702033041023)
@@ -930,10 +930,10 @@
     private void checkAnnualMembershipPayments() {
         ArrayList<Member> members = controller.getMembers();
 
-            System.out.println("Checking Annual Membership Payments:\n");
-            for (Member member : members) {
-                System.out.println("Member: " + member.getName() + " (Member Number: " + member.getMemberNumber() + ")");
-                System.out.println("medlemsstatus: " + member.getPassiveOrActive());
+        System.out.println("Checking Annual Membership Payments:\n");
+        for (Member member : members) {
+            System.out.println("Member: " + member.getName() + " (Member Number: " + member.getMemberNumber() + ")");
+            System.out.println("medlemsstatus: " + member.getPassiveOrActive());
 
 
             if (controller.hasPaidAnnualMembership(member)) {
@@ -948,20 +948,20 @@
         Scanner scanner = new Scanner(System.in);
         ArrayList<Member> members = controller.getMembers();
 
-            System.out.println("Enter the member number for which you want to change the annual membership payment status:");
-            int memberNumber = scanner.nextInt();
+        System.out.println("Enter the member number for which you want to change the annual membership payment status:");
+        int memberNumber = scanner.nextInt();
 
-            boolean found = false;
+        boolean found = false;
 
-            for (Member member : members) {
-                if (member.getMemberNumber() == memberNumber) {
-                    found = true;
+        for (Member member : members) {
+            if (member.getMemberNumber() == memberNumber) {
+                found = true;
 
-                    System.out.println("Current annual membership payment status for member " + member.getName() + ": " +
-                            (member.hasPaidAnnualMembership() ? "Paid" : "Not paid"));
+                System.out.println("Current annual membership payment status for member " + member.getName() + ": " +
+                        (member.hasPaidAnnualMembership() ? "Paid" : "Not paid"));
 
-                    System.out.println("Do you want to change the status? (Enter 'Y' for Yes, 'N' for No)");
-                    String input = scanner.next();
+                System.out.println("Do you want to change the status? (Enter 'Y' for Yes, 'N' for No)");
+                String input = scanner.next();
 
                 if (input.equalsIgnoreCase("Y")) {
                     boolean newStatus = !member.hasPaidAnnualMembership();
@@ -978,10 +978,50 @@
             }
         }
 
-            if (!found) {
-                System.out.println("Member with member number " + memberNumber + " not found.");
+        if (!found) {
+            System.out.println("Member with member number " + memberNumber + " not found.");
+        }
+    }*/
+    public void changeAnnualMembershipPayments() {
+        Scanner scanner = new Scanner(System.in);
+        ArrayList<Member> members = controller.getMembers();
+
+        System.out.println("Enter the member number for which you want to change the annual membership payment status:");
+        int memberNumber = scanner.nextInt();
+
+        boolean found = false;
+
+        for (Member member : members) {
+            if (member.getMemberNumber() == memberNumber) {
+                found = true;
+
+                System.out.println("Current annual membership payment status for member " + member.getName() + ": " +
+                        (member.hasPaidAnnualMembership() ? "Paid" : "Not paid"));
+
+                System.out.println("Do you want to change the status? (Enter 'Y' for Yes, 'N' for No)");
+                String input = scanner.next();
+
+                if (input.equalsIgnoreCase("Y")) {
+                    boolean newStatus = !member.hasPaidAnnualMembership();
+                    member.setAnnualMembershipPaymentStatus(newStatus);
+                    System.out.println("Updated annual membership payment status for member " + member.getName() +
+                            " to " + (newStatus ? "Paid" : "Not paid"));
+
+                    // Pass the correct member number to the controller method
+                    controller.registretPaidOrNot(memberNumber, newStatus);
+                } else {
+                    System.out.println("No changes made.");
+                }
+
+                break; // Exit the loop since the member has been found
             }
         }
+
+        if (!found) {
+            System.out.println("Member with member number " + memberNumber + " not found.");
+        }
+    }
+
 
     //______________
 
Index: src/main/java/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Random;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Member {\r\n\r\n    private String name;\r\n    private LocalDate dateOfBirth;\r\n    private String gender;\r\n    private int phonenumber;\r\n    private String adress;\r\n    private int memberNumber;\r\n    private String passiveOrActive; // TODO Overvej at ændre til boolean\r\n    private String memberType;\r\n    private String motionist;\r\n    private boolean paidAnnualMembership;\r\n    private List<Integer> usedMemberNumbers = new ArrayList<>();\r\n\r\n\r\n    //TODO Konstruktører\r\n    public Member(String name, String dateOfBirth, String gender, int phonenumber, String adress, int memberNumber, String passiveOrActive, String memberType, String motionist) {\r\n        this.name = name;\r\n        this.dateOfBirth = LocalDate.parse(dateOfBirth, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));\r\n        this.gender = gender;\r\n        this.phonenumber = phonenumber;\r\n        this.adress = adress;\r\n        this.memberNumber = memberNumber;\r\n        this.passiveOrActive = passiveOrActive;\r\n        this.memberType = memberType;\r\n        this.motionist = motionist;\r\n\r\n    }\r\n\r\n    public Member(int memberNumber, Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline, String eventName, String eventPlacement) {\r\n    }\r\n\r\n    public Member(int memberNumber) {\r\n    }\r\n\r\n    public Member() {\r\n    }\r\n\r\n    public Member(int memberNumber, java.time.Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline) {\r\n    }\r\n\r\n    public Member() {\r\n    }\r\n\r\n\r\n    //___________\r\n    public void setPaidAnnualMembership(boolean paidAnnualMembership) {\r\n        this.paidAnnualMembership = paidAnnualMembership;\r\n    }\r\n\r\n    public boolean hasPaidAnnualmembership() {\r\n        return paidAnnualMembership;\r\n    }\r\n\r\n    public void setAnnualMembershipPaymentStatus(boolean paid) {\r\n        this.paidAnnualMembership = paid;\r\n    }\r\n    //_____________\r\n\r\n    public int generateMemberNumber() {\r\n        Random random = new Random();\r\n        int newMemberNumber;\r\n        do {\r\n            newMemberNumber = random.nextInt(999999);\r\n        } while (memberNumberUsed(newMemberNumber));\r\n\r\n        usedMemberNumbers.add(newMemberNumber);\r\n        return newMemberNumber;\r\n    }\r\n\r\n    public boolean memberNumberUsed(int number) {\r\n        for (int usedNumber : usedMemberNumbers) {\r\n            if (usedNumber == number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public int calculateAge(LocalDate date) {\r\n        this.dateOfBirth = date;\r\n        LocalDate today = LocalDate.now();\r\n        //System.out.println(today.getYear() - dateOfBirth.getYear());\r\n        return today.getYear() - dateOfBirth.getYear();\r\n    }\r\n\r\n    public int calculateAgeList() {\r\n        LocalDate today = LocalDate.now();\r\n        return today.getYear() - dateOfBirth.getYear();\r\n    }\r\n\r\n\r\n    public int calculateYearlySubscriptionFee() {\r\n        int baseFee = 0;\r\n\r\n        if (\"aktivt\".equalsIgnoreCase(passiveOrActive)) {\r\n            if (\"ungdomssvømmer u18\".equalsIgnoreCase(memberType)) {\r\n                baseFee = 1000;\r\n            } else if (\"senior\".equalsIgnoreCase(memberType) || \"ungdomssvømmer o18\".equalsIgnoreCase(memberType)) {\r\n                baseFee = 1600;\r\n                if (calculateAgeList() > 60) {\r\n                    baseFee = (int) (baseFee * 0.75);\r\n                }\r\n            }\r\n        } else if (\"passivt\".equalsIgnoreCase(passiveOrActive)) {\r\n            baseFee = 500;\r\n        }\r\n\r\n        return baseFee;\r\n    }\r\n\r\n\r\n// TODO Getters\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public LocalDate getDateOfBirth() {\r\n        return dateOfBirth;\r\n    }\r\n\r\n    public String getGender() {\r\n        return gender;\r\n    }\r\n\r\n    public int getPhonenumber() {\r\n        return phonenumber;\r\n    }\r\n\r\n    public String getAdress() {\r\n        return adress;\r\n    }\r\n\r\n    public int getMemberNumber() {\r\n        return memberNumber;\r\n    }\r\n\r\n    public String getPassiveOrActive() {\r\n        return passiveOrActive;\r\n    }\r\n\r\n    public String getMemberType() {\r\n        return memberType;\r\n    }\r\n\r\n    public String getMotionist() {\r\n        return motionist;\r\n    }\r\n\r\n\r\n    //TODO Setters\r\n\r\n    public void setMemberNumber(int memberNumber) {\r\n        this.memberNumber = memberNumber;\r\n    }\r\n\r\n    public boolean hasPaidAnnualMembership() {\r\n        return paidAnnualMembership;\r\n    }\r\n\r\n    public void editName(String newName) {\r\n        this.name = newName;\r\n    }\r\n\r\n    public void editDateOfBirth(String newDateOfBirth) {\r\n        this.dateOfBirth = LocalDate.parse(newDateOfBirth, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));\r\n    }\r\n//TODO Edits\r\n    public void editGender(String newGender) {\r\n        this.gender = newGender;\r\n    }\r\n\r\n    public void editPhonenumber(int newPhonenumber) {\r\n        this.phonenumber = newPhonenumber;\r\n    }\r\n    public void editAdress(String newAdress) {\r\n        this.adress = newAdress;\r\n    }\r\n\r\n    public void editPassiveOrActive(String newPassiveOrActive) {\r\n        this.passiveOrActive = newPassiveOrActive;\r\n    }\r\n    public void editMotionist(String newMotionist) {\r\n        this.motionist = newMotionist;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"\\n\" +\r\n                \"navn:\" + \" \" + name + \"\\n\" +\r\n                \"Fødselsår:\" + \" \" + dateOfBirth + \"\\n\" +\r\n                \"køn:\" + \" \" + gender + \"\\n\" +\r\n                \"telefon:\" + \" \" + phonenumber + \"\\n\" +\r\n                \"Adresse:\" + \" \" + adress + \"\\n\" +\r\n                \"Medlemsnummer:\" + \" \" + memberNumber + \"\\n\" +\r\n                \"Medlemsstatus:\" + \" \" + passiveOrActive + \"\\n\" +\r\n                \"Medlemstype:\" + \" \" + memberType + \"\\n\" +\r\n                \"Motionist:\" + \" \" + motionist + \"\\n\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Member.java b/src/main/java/Member.java
--- a/src/main/java/Member.java	(revision 8c83904c03629e5ef59a3ddeaf2225d20ac747a2)
+++ b/src/main/java/Member.java	(date 1702030048368)
@@ -40,7 +40,7 @@
     public Member(int memberNumber) {
     }
 
-    public Member() {
+    public Member(int memberNumber, Boolean paidOrNot) {
     }
 
     public Member(int memberNumber, java.time.Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline) {
Index: src/main/java/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.*;\r\n\r\npublic class Database {\r\n\r\n    private ArrayList<Member> meembers = new ArrayList<>();\r\n    private FileHandler fileHandler = new FileHandler(\"MedlemsListe.csv\");\r\n    private FileHandler fileHandler1 = new FileHandler(\"TræningsTid.csv\");\r\n\r\n    private FileHandler fileHandler2 = new FileHandler(\"KontingentOversigt.csv\");\r\n    private ArrayList<CompetitiveMember> compMeembersEvent = new ArrayList<>();\r\n    private ArrayList<CompetitiveMember> compMeembersTræning = new ArrayList<>();\r\n    private ArrayList<MembershipStatus> statusPayment = new ArrayList<>();\r\n    private Member member;\r\n\r\n    public Database() {\r\n        if (meembers.isEmpty()) {\r\n            meembers = fileHandler.loadedMembers();\r\n        }\r\n        if (compMeembersEvent.isEmpty()) {\r\n            compMeembersEvent = fileHandler.loadedCompetitiveMember(\"KonkurrenceTid.csv\");\r\n        }\r\n        if (compMeembersTræning.isEmpty()) {\r\n            compMeembersTræning = fileHandler1.loadedTræningsResultater( \"TræningsTid.csv\");\r\n        }\r\n    }\r\n\r\n   /* public void registrerPaidOrNot(int memberNumber, boolean paid) {\r\n        try {\r\n            MembershipStatus membershipStatus = new MembershipStatus(memberNumber, paid);\r\n            statusPayment.add(membershipStatus);\r\n            fileHandler.saveListOfPaidOrNot(\"KontingentOversigt.csv\", statusPayment);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }*/\r\n\r\n    public void registrerPaidOrNot(int memberNumber, boolean paid) {\r\n        try {\r\n            MembershipStatus membershipStatus = new MembershipStatus(memberNumber, paid);\r\n            statusPayment.add(membershipStatus);\r\n            fileHandler.saveListOfPaidOrNot(\"KontingentOversigt.csv\", statusPayment);\r\n\r\n            // Update the payment status for the member in the members list\r\n            Member member = getMemberByNumber(memberNumber);\r\n            if (member != null) {\r\n                member.setAnnualMembershipPaymentStatus(paid);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //_____\r\n\r\n    public int calculateYearlyIncome() {\r\n        int yearlyIncome = 0;\r\n\r\n        for (Member member : meembers) {\r\n            yearlyIncome += member.calculateYearlySubscriptionFee();\r\n        }\r\n\r\n        return yearlyIncome;\r\n    }\r\n\r\n    private void renewMembershipForSelectedMember(Member selectedMember) {\r\n        // Implement logic to renew membership, e.g., update membership status\r\n        // You may need to modify this based on your actual data structure and logic\r\n        selectedMember.setPaidAnnualMembership(true);\r\n    }\r\n\r\n    public void renewMembership() {\r\n        ArrayList<Member> members = getMeembers();\r\n\r\n        System.out.println(\"List of Members:\");\r\n        for (Member member : members) {\r\n            System.out.println(\"Member Number: \" + member.getMemberNumber() + \", Name: \" + member.getName() + \", Membership Status: \" + (member.hasPaidAnnualMembership() ? \"Paid\" : \"Not Paid\"));\r\n        }\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the Member Number to renew membership: \");\r\n        int selectedMemberNumber = scanner.nextInt();\r\n\r\n        Member selectedMember = getMemberByNumber(selectedMemberNumber);\r\n        if (selectedMember != null) {\r\n            if (member.hasPaidAnnualMembership()) {\r\n                System.out.println(\"Membership is already paid for this member.\");\r\n            } else {\r\n                renewMembershipForSelectedMember(selectedMember);\r\n                System.out.println(\"Membership renewed successfully!\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Member not found.\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //TODO MEDLEM\r\n\r\n\r\n    public void registrerMedlem(String name, String dateOfBirth, String gender, int phonenumber, String address, int memberNumber, String passiveOrActive, String memberType, String motionist) {\r\n        try {\r\n            Member member = new Member(name, dateOfBirth, gender, phonenumber, address, memberNumber, passiveOrActive, memberType, motionist);\r\n            meembers.add(member);\r\n            fileHandler.saveListOfMembersToFile(\"MedlemsListe.csv\", meembers);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public ArrayList<Member> getMeembers() {\r\n        return meembers;\r\n    }\r\n\r\n    public void sortMembersByAge(List<Member> meembers) {\r\n        meembers.sort(Comparator.comparingInt(Member::calculateAgeList));\r\n    }\r\n    public boolean memberExists(int memberNumber) {\r\n        for (Member member : meembers) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public Member getMemberByNumber(int memberNumber) {\r\n        for (Member member : getMeembers()) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return member;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public void updateMember(Member updatedMember) {\r\n        for (int i = 0; i < meembers.size(); i++) {\r\n            Member existingMember = meembers.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                meembers.set(i, updatedMember);\r\n                fileHandler.saveListOfMembersToFile(\"MedlemsListe.csv\", meembers);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    public CompetitiveMember getMemberByMemberNumberEvent (int memberNumber) {\r\n        for (CompetitiveMember member : getCompMeembersEvent()) {\r\n            if (member.getMemberNumber() == memberNumber) {\r\n                return member;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    //TODO EVENT\r\n\r\n    public ArrayList<CompetitiveMember> getCompMeembersEvent() {\r\n        return compMeembersEvent;\r\n    }\r\n\r\n    public void sortTrainingMembersBySwimTime() {\r\n        compMeembersTræning.sort(Comparator.comparing(CompetitiveMember::getSwimTime));\r\n    }\r\n    public void sortEventMembersBySwimTime() {\r\n        compMeembersEvent.sort(Comparator.comparing(CompetitiveMember ::getSwimTime ));\r\n    }\r\n\r\n    public boolean isCompetitiveUnder18(Member member) {\r\n        return \"aktivt\".equalsIgnoreCase(member.getPassiveOrActive()) && \"ungdomssvømmer u18\".equalsIgnoreCase(member.getMemberType()) && member.calculateAgeList() < 18;\r\n    }\r\n\r\n    public boolean isCompetitiveOver18(Member member) {\r\n        return \"aktivt\".equalsIgnoreCase(member.getPassiveOrActive()) && \"ungdomssvømmer o18\".equalsIgnoreCase(member.getMemberType()) && member.calculateAgeList() >= 18;\r\n    }\r\n    public List<Member> getCompetitiveMembersUnder18() {\r\n        List<Member> competitiveMembersUnder18 = new ArrayList<>();\r\n\r\n        for (Member member : meembers) {\r\n            if (isCompetitiveUnder18(member)) {\r\n                competitiveMembersUnder18.add(member);\r\n            }\r\n        }\r\n\r\n        return competitiveMembersUnder18;\r\n    }\r\n\r\n    public List<Member> getCompetitiveMembersOver18() {\r\n        List<Member> competitiveMembersOver18 = new ArrayList<>();\r\n\r\n        for (Member member : meembers) {\r\n            if (isCompetitiveOver18(member)) {\r\n                competitiveMembersOver18.add(member);\r\n            }\r\n        }\r\n\r\n        return competitiveMembersOver18;\r\n    }\r\n    public ArrayList<CompetitiveMember> getCompMeembers() {\r\n        return compMeembersEvent;\r\n    }\r\n    public void registrerEventTid(int memberNumber, Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline, String eventName, String eventPlacement) {\r\n        try {\r\n            CompetitiveMember competitiveMember = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline, eventName, eventPlacement);\r\n            compMeembersEvent.add(competitiveMember);\r\n            fileHandler.saveListOfKokurrenceTidToFile(\"KonkurrenceTid.csv\", compMeembersEvent);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void updateKonkurrence(CompetitiveMember updatedMember) {\r\n        for (int i = 0; i < compMeembersEvent.size(); i++) {\r\n            CompetitiveMember existingMember = compMeembersEvent.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                compMeembersEvent.set(i, updatedMember);\r\n                fileHandler.saveListOfKokurrenceTidToFile(\"KonkurrenceTid.csv\", compMeembersEvent);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n//TODO TRÆNING\r\npublic ArrayList<CompetitiveMember> getCompMeembersTræning() {\r\n    return compMeembersTræning;\r\n}\r\npublic void registrerTræningTid(int memberNumber, Duration swimTime, LocalDate dateOfSwim, SwimmingDiscipline swimmingDiscipline) {\r\n    try {\r\n\r\n        //Member member = new Member(memberNumber, svimTime, dateOfSwim, swimmingDiscipline);\r\n        CompetitiveMember competitiveMember = new CompetitiveMember(memberNumber, swimTime, dateOfSwim, swimmingDiscipline);\r\n        compMeembersTræning.add(competitiveMember);\r\n        fileHandler.saveListOfTræningsTidToFile(\"TræningsTid.csv\", compMeembersTræning);\r\n\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\npublic CompetitiveMember getMemberByMemberNumberTræning(int memberNumber) {\r\n    for (CompetitiveMember member : getCompMeembersTræning()) {\r\n        if (member.getMemberNumber() == memberNumber) {\r\n            return member;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n    public void updateTræning(CompetitiveMember updatedMember) {\r\n        for (int i = 0; i < compMeembersTræning.size(); i++) {\r\n            CompetitiveMember existingMember = compMeembersTræning.get(i);\r\n            if (existingMember.getMemberNumber() == updatedMember.getMemberNumber()) {\r\n                compMeembersTræning.set(i, updatedMember);\r\n                fileHandler.saveListOfTræningsTidToFile(\"TræningsTid.csv\", compMeembersTræning);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //TODO BÅDE TRÆNING OG EVENT\r\n\r\n    public List<CompetitiveMember> getTop5SwimTimes(SwimmingDiscipline swimmingDiscipline) {\r\n        List<CompetitiveMember> competitiveMembers = new ArrayList<>();\r\n\r\n        switch (swimmingDiscipline) {\r\n            case BUTTERFLY:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case BACKSTROKE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case BREASTSTROKE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n            case FREESTYLE:\r\n                competitiveMembers.addAll(getCompMeembersTræning());\r\n                competitiveMembers.addAll(getCompMeembersEvent());\r\n                break;\r\n        }\r\n\r\n        competitiveMembers.sort(Comparator.comparing(CompetitiveMember::getSwimTime));\r\n\r\n        return competitiveMembers;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Database.java b/src/main/java/Database.java
--- a/src/main/java/Database.java	(revision 8c83904c03629e5ef59a3ddeaf2225d20ac747a2)
+++ b/src/main/java/Database.java	(date 1702032466358)
@@ -1,7 +1,5 @@
-import java.time.Duration;
+import java.time.Duration; 
 import java.time.LocalDate;
-import java.time.LocalTime;
-import java.time.format.DateTimeFormatter;
 import java.util.*;
 
 public class Database {
